{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gu\u00eda de uso de HTML5SVG2 Acerca de html5svg2 Es una utilidad para generar reportes en formato HTML ( HyperText Markup Language ) y SVG ( Scalable Vector Graphics ) en aplicaciones de Python. Para su uso, se requiere por parte del usuario un conocimiento b\u00e1sico del lenguaje de marcado HTML y SVG. Si requiere aprender sobre HTML, SVG y temas afines, un buen tutorial lo encuentra en www.w3schools.com Instalaci\u00f3n pip install html5svg2 Ejemplo de uso from html5svg2 import dTag, dEtq, HTML5, SVG2, circulo # Crear el objeto de la clase HTML5 h = HTML5() # Codificar el bloque <head> h.cabecera(dTag('title','Ejemplo con HTML5SVG2')) h.cabecera(dEtq('meta', charset='UTF-8')) # Codificar el bloque <body> h.contenido(dTag('h1', 'T\u00edtulo', style='color:red')) h.contenido(dTag('h2', 'Subt\u00edtulo', style='color:blue')) h.contenido(dTag('p', 'Ejemplo generado con html5svg2', style='color:navy')) # Incluir gr\u00e1fico SVG s = SVG2(W=200, H=120) s.dibujar(circulo((100, 60), 50, style=\"stroke:magenta;fill:gold\")) h.contenido(s.exp()) # Archivar h.gravar(\"reporte.html\") Vista resultante:","title":"Gu\u00eda de uso de HTML5SVG2"},{"location":"#guia-de-uso-de-html5svg2","text":"","title":"Gu\u00eda de uso de HTML5SVG2"},{"location":"#acerca-de-html5svg2","text":"Es una utilidad para generar reportes en formato HTML ( HyperText Markup Language ) y SVG ( Scalable Vector Graphics ) en aplicaciones de Python. Para su uso, se requiere por parte del usuario un conocimiento b\u00e1sico del lenguaje de marcado HTML y SVG. Si requiere aprender sobre HTML, SVG y temas afines, un buen tutorial lo encuentra en www.w3schools.com","title":"Acerca de html5svg2"},{"location":"#instalacion","text":"pip install html5svg2","title":"Instalaci\u00f3n"},{"location":"#ejemplo-de-uso","text":"from html5svg2 import dTag, dEtq, HTML5, SVG2, circulo # Crear el objeto de la clase HTML5 h = HTML5() # Codificar el bloque <head> h.cabecera(dTag('title','Ejemplo con HTML5SVG2')) h.cabecera(dEtq('meta', charset='UTF-8')) # Codificar el bloque <body> h.contenido(dTag('h1', 'T\u00edtulo', style='color:red')) h.contenido(dTag('h2', 'Subt\u00edtulo', style='color:blue')) h.contenido(dTag('p', 'Ejemplo generado con html5svg2', style='color:navy')) # Incluir gr\u00e1fico SVG s = SVG2(W=200, H=120) s.dibujar(circulo((100, 60), 50, style=\"stroke:magenta;fill:gold\")) h.contenido(s.exp()) # Archivar h.gravar(\"reporte.html\") Vista resultante:","title":"Ejemplo de uso"},{"location":"1_intro/","text":"Codificaci\u00f3n Funciones de codificaci\u00f3n En html5svg2 los documentos HTML se codifican empleando las funciones dTag , dEtq y dCmt . Cada una de estas funciones devuelven una lista de texto codificado de acuerdo a la sintaxis del lenguaje de marcas de HTML. Estas listas se introducen \u2014 seg\u00fan corresponda \u2014 por medio de los m\u00e9todos cabecera() y contenido() en el objeto de la clase HTML5. dTag dTag(tag, obj, **js) # tag: marca o etiqueta # obj: contenido de la marca (texto o lista de texto) # **js: argumentos clave:valor de la marca La funci\u00f3n dTag() se emplea para codificar el marcado que tiene la siguiente forma: <marca arg0=\"val0\" arg1=\"val1\"> contenido </marca> El ejemplo dado a continuaci\u00f3n dTag('h1', 'T\u00edtulo', style=\"color:red;\") Genera el siguiente resultado ['<h1 style=\"color:red;\">T\u00edtulo</h1>'] dEtq dEtq(etq, **js) # etq: marca o etiqueta # **js: argumentos clave:valor de la marca La funci\u00f3n dEtq() se emplea para codificar el marcado que tiene la siguiente forma: <marca arg0=\"val0\" arg1=\"val1\" /> Ejemplo dEtq('img', src=\"imagen.png\", alt=\"(imagen)\") Resultado ['<img src=\"imagen.png\" alt=\"(imagen)\" />'] dCmt dCmt(obj) # obj: texto o lista de texto La funci\u00f3n dCmt() se emplea para codificar comentarios. Estas no ser\u00e1n visibles en la p\u00e1gina web. Ejemplo dCmt('Esto es un comentario') Resultado ['<!-- Esto es un comentario -->'] Codificaci\u00f3n de marcado anidado El siguiente c\u00f3digo HTML correspondiente a un ejemplo de una lista ordenada <h1>El Tahuantinsuyo</h1> <ol style=\"font-size:14pt\"> <li>Collasuyo</li> <li>Contisuyo</li> <li>Chinchaysuyo</li> <li>Antisuyo</li> </ol> se codifica de la siguiente manera h = HTML5() h.contenido(dTag('h1', 'El Tahuantinsuyo')) lst = [ dTag('li', 'Collasuyo')[0], dTag('li', 'Contisuyo')[0], dTag('li', 'Chinchaysuyo')[0], dTag('li', 'Antisuyo')[0] ] h.contenido(dTag('ol', lst, style=\"font-size:14pt\")) y se mostrar\u00e1 en la p\u00e1gina web de la siguiente forma","title":"1. Codificaci\u00f3n"},{"location":"1_intro/#codificacion","text":"","title":"Codificaci\u00f3n"},{"location":"1_intro/#funciones-de-codificacion","text":"En html5svg2 los documentos HTML se codifican empleando las funciones dTag , dEtq y dCmt . Cada una de estas funciones devuelven una lista de texto codificado de acuerdo a la sintaxis del lenguaje de marcas de HTML. Estas listas se introducen \u2014 seg\u00fan corresponda \u2014 por medio de los m\u00e9todos cabecera() y contenido() en el objeto de la clase HTML5.","title":"Funciones de codificaci\u00f3n"},{"location":"1_intro/#dtag","text":"dTag(tag, obj, **js) # tag: marca o etiqueta # obj: contenido de la marca (texto o lista de texto) # **js: argumentos clave:valor de la marca La funci\u00f3n dTag() se emplea para codificar el marcado que tiene la siguiente forma: <marca arg0=\"val0\" arg1=\"val1\"> contenido </marca> El ejemplo dado a continuaci\u00f3n dTag('h1', 'T\u00edtulo', style=\"color:red;\") Genera el siguiente resultado ['<h1 style=\"color:red;\">T\u00edtulo</h1>']","title":"dTag"},{"location":"1_intro/#detq","text":"dEtq(etq, **js) # etq: marca o etiqueta # **js: argumentos clave:valor de la marca La funci\u00f3n dEtq() se emplea para codificar el marcado que tiene la siguiente forma: <marca arg0=\"val0\" arg1=\"val1\" /> Ejemplo dEtq('img', src=\"imagen.png\", alt=\"(imagen)\") Resultado ['<img src=\"imagen.png\" alt=\"(imagen)\" />']","title":"dEtq"},{"location":"1_intro/#dcmt","text":"dCmt(obj) # obj: texto o lista de texto La funci\u00f3n dCmt() se emplea para codificar comentarios. Estas no ser\u00e1n visibles en la p\u00e1gina web. Ejemplo dCmt('Esto es un comentario') Resultado ['<!-- Esto es un comentario -->']","title":"dCmt"},{"location":"1_intro/#codificacion-de-marcado-anidado","text":"El siguiente c\u00f3digo HTML correspondiente a un ejemplo de una lista ordenada <h1>El Tahuantinsuyo</h1> <ol style=\"font-size:14pt\"> <li>Collasuyo</li> <li>Contisuyo</li> <li>Chinchaysuyo</li> <li>Antisuyo</li> </ol> se codifica de la siguiente manera h = HTML5() h.contenido(dTag('h1', 'El Tahuantinsuyo')) lst = [ dTag('li', 'Collasuyo')[0], dTag('li', 'Contisuyo')[0], dTag('li', 'Chinchaysuyo')[0], dTag('li', 'Antisuyo')[0] ] h.contenido(dTag('ol', lst, style=\"font-size:14pt\")) y se mostrar\u00e1 en la p\u00e1gina web de la siguiente forma","title":"Codificaci\u00f3n de marcado anidado"},{"location":"2_html/","text":"HTML Estructura b\u00e1sica de un documento HTML Codificaci\u00f3n de una p\u00e1gina html con htm5svg2 B\u00e1sicamente, consta de cuatro pasos. Crear un objeto a partir de la clase HTML5 Codificar el bloque <head> con el m\u00e9todo cabecera() Codificar el bloque <body> con el m\u00e9todo contenido() Gravar en un archivo texto. A continuaci\u00f3n se muestra un ejemplo: from html5svg2 import HTML5, dTag, dEtq # 1. Crear el objeto de la clase HTML5 h = HTML5() # 2. Codificar el bloque <head> h.cabecera(dTag('title','Ejemplo con HTML5SVG2')) h.cabecera(dEtq('meta', charset='UTF-8')) h.cabecera(dEtq('meta', name='viewport', content='width=device-width, initial-scale=1.0')) h.cabecera(dEtq('meta', name='description', content='Una demostraci\u00f3n de HTML5SVG2 ..')) h.cabecera(dEtq('meta', name='keywords', content='HTML, CSS, SVG, JavaScript')) h.cabecera(dEtq('meta', name='author', content='Borsi F. Romero A.')) h.cabecera(dEtq('link', rel='stylesheet', type=\"text/css\", href=\"https://www.w3schools.com/w3css/4/w3.css\")) h.cabecera(dEtq('link', rel='stylesheet', href=\"https://fonts.googleapis.com/css?family=Architects Daughter|Baumans|Monoton|Mallanna|Bellefair|Josefin Sans:300,600\")) l_stl = [ \"body {background-color: lightblue; font-family: Josefin Sans;}\", \"h1, h2, h3 {color: blue}\" ] h.cabecera(dTag('style', l_stl)) # 3. Codificar el bloque <body> h.contenido(dTag('h1', 'HTML 5 SVG 2 / W3.CSS', **{'class': 'w3-container w3-center w3-blue', 'style': 'font-family:Monoton'})) lo = dTag('h2', 'Esto es fant\u00e1stico ...', **{'style': 'font-family:Architects Daughter'}) ls = dTag('header', dTag('h2', 'Los doce ap\u00f3stoles de Jes\u00fas'), **{'class': 'w3-container w3-amber', 'style': 'font-family:Baumans'}) lAp = [ \"Sim\u00f3n, llamado Pedro\", \"Andr\u00e9s hermano de Pedro\", \"Jacobo hijo de Zebedeo\", \"Juan su hermano\", \"Felipe\", \"Bartolom\u00e9\", \"Tom\u00e1s\", \"Mateo el publicano\", \"Jacobo hijo de Alfeo\", \"Lebeo, por sobrenombre Tadeo\", \"Sim\u00f3n el cananista\", \"Judas Iscariot, el que tambi\u00e9n le entreg\u00f3.\" ] ls.extend(dTag('ol', [dTag('li', tx)[0] for tx in lAp], style=\"font-size:16pt\")) ls.extend(dEtq('br')) lo.extend(dTag('div', ls, **{'class': 'w3-card-4 w3-sand', 'style': 'width:100%;'})) h.contenido(dTag('div', lo, **{'class': 'w3-container'})) # 4. Archivar h.gravar(\"demo0.html\") El resultado se ver\u00e1 tal como se aprecia en la siguiente imagen.","title":"2. HTML"},{"location":"2_html/#html","text":"","title":"HTML"},{"location":"2_html/#estructura-basica-de-un-documento-html","text":"","title":"Estructura b\u00e1sica de un documento HTML"},{"location":"2_html/#codificacion-de-una-pagina-html-con-htm5svg2","text":"B\u00e1sicamente, consta de cuatro pasos. Crear un objeto a partir de la clase HTML5 Codificar el bloque <head> con el m\u00e9todo cabecera() Codificar el bloque <body> con el m\u00e9todo contenido() Gravar en un archivo texto. A continuaci\u00f3n se muestra un ejemplo: from html5svg2 import HTML5, dTag, dEtq # 1. Crear el objeto de la clase HTML5 h = HTML5() # 2. Codificar el bloque <head> h.cabecera(dTag('title','Ejemplo con HTML5SVG2')) h.cabecera(dEtq('meta', charset='UTF-8')) h.cabecera(dEtq('meta', name='viewport', content='width=device-width, initial-scale=1.0')) h.cabecera(dEtq('meta', name='description', content='Una demostraci\u00f3n de HTML5SVG2 ..')) h.cabecera(dEtq('meta', name='keywords', content='HTML, CSS, SVG, JavaScript')) h.cabecera(dEtq('meta', name='author', content='Borsi F. Romero A.')) h.cabecera(dEtq('link', rel='stylesheet', type=\"text/css\", href=\"https://www.w3schools.com/w3css/4/w3.css\")) h.cabecera(dEtq('link', rel='stylesheet', href=\"https://fonts.googleapis.com/css?family=Architects Daughter|Baumans|Monoton|Mallanna|Bellefair|Josefin Sans:300,600\")) l_stl = [ \"body {background-color: lightblue; font-family: Josefin Sans;}\", \"h1, h2, h3 {color: blue}\" ] h.cabecera(dTag('style', l_stl)) # 3. Codificar el bloque <body> h.contenido(dTag('h1', 'HTML 5 SVG 2 / W3.CSS', **{'class': 'w3-container w3-center w3-blue', 'style': 'font-family:Monoton'})) lo = dTag('h2', 'Esto es fant\u00e1stico ...', **{'style': 'font-family:Architects Daughter'}) ls = dTag('header', dTag('h2', 'Los doce ap\u00f3stoles de Jes\u00fas'), **{'class': 'w3-container w3-amber', 'style': 'font-family:Baumans'}) lAp = [ \"Sim\u00f3n, llamado Pedro\", \"Andr\u00e9s hermano de Pedro\", \"Jacobo hijo de Zebedeo\", \"Juan su hermano\", \"Felipe\", \"Bartolom\u00e9\", \"Tom\u00e1s\", \"Mateo el publicano\", \"Jacobo hijo de Alfeo\", \"Lebeo, por sobrenombre Tadeo\", \"Sim\u00f3n el cananista\", \"Judas Iscariot, el que tambi\u00e9n le entreg\u00f3.\" ] ls.extend(dTag('ol', [dTag('li', tx)[0] for tx in lAp], style=\"font-size:16pt\")) ls.extend(dEtq('br')) lo.extend(dTag('div', ls, **{'class': 'w3-card-4 w3-sand', 'style': 'width:100%;'})) h.contenido(dTag('div', lo, **{'class': 'w3-container'})) # 4. Archivar h.gravar(\"demo0.html\") El resultado se ver\u00e1 tal como se aprecia en la siguiente imagen.","title":"Codificaci\u00f3n de una p\u00e1gina html con htm5svg2"},{"location":"3_svg/","text":"SVG Sistema de coordenadas En esta aplicaci\u00f3n se la entrada de datos para dibujar figuras geom\u00e9tricas se emplea el sistema de coordenadas cartesianas. Para la definici\u00f3n de marcadores \u00fasese el sistema de coordenadas SVG. Figuras geom\u00e9tricas L\u00ednea linea(p1, p2, **js) # p1 = (x1, y1) # p2 = (x2, y2) # **js: argumentos clave:valor Ejemplo: from html5svg2 import SVG2, linea svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(240,250,240)\") svg.cuadricula(10, style=\"stroke:green;stroke-width:0.1px;\") l_db = [ linea((10, 90), (150, 120), style=\"stroke:red;stroke-width:0.5px;\"), linea((10, 70), (150, 100), style=\"stroke:red;stroke-width:5px;\"), linea((10, 50), (150, 80), style=\"stroke:red;stroke-width:10px;\"), linea((10, 30), (150, 60), style=\"stroke:blue;\"), linea((10, 10), (150, 40), style=\"stroke:black;\"), linea((180, 100), (320, 100), style=\"stroke:black;stroke-dasharray:10 2\"), linea((180, 80), (320, 80), style=\"stroke:black;stroke-dasharray:10 5\"), linea((180, 60), (320, 60), style=\"stroke:black;stroke-dasharray:5\"), linea((180, 40), (320, 40), style=\"stroke:black;stroke-dasharray:10\"), linea((180, 20), (320, 20), style=\"stroke:black;\"), ] for db in l_db: svg.dibujar(db) svg.gravar(\"linea.svg\") Polilinea polilinea(pts, **jx) # pts: lista de puntos [(x,y), ..] # **js: argumentos clave:valor Ejemplo: from html5svg2 import SVG2, polilinea svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") pts_1 = [(130, 30), (80, 30), (80, 10), (10, 65), (80, 120), (80, 100), (130, 100)] pts_2 = [(200, 30), (250, 30), (250, 10), (320, 65), (250, 120), (250, 100), (200, 100)] svg.dibujar(polilinea(pts_1, style=\"fill:none;stroke:blue;\")) svg.dibujar(polilinea(pts_2, style=\"fill:gold;stroke:blue;\")) svg.gravar(\"polilinea.svg\") Pol\u00edgono poligono(pts, **jx) # pts: lista de puntos [(x,y), ..] # **js: argumentos clave:valor Ejemplo: from html5svg2 import SVG2, poligono svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") pts_1 = [(130, 30), (80, 30), (80, 10), (10, 65), (80, 120), (80, 100), (130, 100)] pts_2 = [(200, 30), (250, 30), (250, 10), (320, 65), (250, 120), (250, 100), (200, 100)] svg.dibujar(poligono(pts_1, style=\"fill:none;stroke:blue;\")) svg.dibujar(poligono(pts_2, style=\"fill:gold;stroke:blue;\")) svg.gravar(\"poligono.svg\") Rect\u00e1ngulo rectangulo(px, w, h, **jx) # px = (x,y) v\u00e9rtice inferior izquierdo del rect\u00e1ngulo # **js: argumentos clave:valor # rx: radio de curvatura en v\u00e9rtices # ry: radio de curvatura en v\u00e9rtices # ang: \u00e1ngulo de rotaci\u00f3n sobre el v\u00e9rtice px y la horizontal (en grados) Ejemplo: from html5svg2 import SVG2, rectangulo svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") stl = \"fill:PaleGreen;opacity:0.5;stroke:green;stroke-width:0.5px;\" stl2 = \"fill:yellow;opacity:0.5;stroke:magenta;stroke-width:1.5px;\" l_db = [ rectangulo((20, 20), 50, 30, style=stl), rectangulo((20, 80), 50, 30, rx=5, style=stl), rectangulo((100, 80), 50, 30, rx=10, ry=5, style=stl), rectangulo((100, 20), 50, 30, rx=5, ry=10, style=stl), rectangulo((220, 20), 80, 50, style=stl2), rectangulo((220, 20), 80, 50, ang=30, style=stl2), rectangulo((220, 20), 80, 50, ang=60, style=stl2), ] for db in l_db: svg.dibujar(db) svg.gravar(\"rectangulo.svg\") C\u00edrculo circulo(po, r, **jx) # po = (x,y): punto central del c\u00edrculo # r: radio del c\u00edrculo Ejemplo: import math from html5svg2 import SVG2, circulo svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") stl1 = \"stroke:blue;stroke-width:0.5;fill:gold;opacity:0.6;\" stl2 = \"stroke:blue;stroke-width:0.75;fill:cyan;opacity:0.3;\" xo = 165 yo = 65 rd = 50 n = 24 ang = 2 * math.pi / n sn = math.sin(ang / 2) r = rd * sn svg.dibujar(circulo((xo, yo), rd - r, style=stl1)) for i in range(n): x = xo + rd * math.cos(ang * i) y = yo + rd * math.sin(ang * i) svg.dibujar(circulo((x, y), r, style=stl2)) svg.gravar(\"circulo.svg\") Elipse elipse(po, rx, ry, ang, **jx) # po = (x,y): punto central de la elipse # rx: radio en el eje X # ry: radio en el eje Y # ang: \u00e1ngulo de rotaci\u00f3n sobre el punto po y la horizontal (en grados) # **js: argumentos clave:valor Ejemplo: import math from html5svg2 import SVG2, circulo, elipse svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") stl1 = \"stroke:blue;stroke-width:0.5;fill:gold;opacity:0.6;\" stl2 = \"stroke:red;stroke-width:1.5;fill:OrangeRed;opacity:0.3;\" xo = 165 yo = 65 rd = 30 n = 3 ang = 2 * math.pi / n svg.dibujar(elipse((xo, yo), 25, 25, 0, style=stl1)) for i in range(n): x = xo + rd * math.cos(ang * i) y = yo + rd * math.sin(ang * i) angr = i * 360 / n svg.dibujar(elipse((x, y), 30, 10, angr, style=stl2)) svg.gravar(\"elipse.svg\") Trayectoria trayectoria(ldx, **jx) Ejemplos: from html5svg2 import SVG2, trayectoria svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") # Trazado de una onda ldx = [{'M': (10, 65)}, {'q': [(20, 50), (40, 0)]}, {'q': [(20, -50), (40, 0)]}] svg.dibujar(trayectoria(ldx, style=\"stroke:blue;stroke-width:1.5px;fill:none;\")) # Trazado de una ar\u00edbalo inca ldx = [ {'M': (140, 120)}, {'q': [(-4, 0), (-4, -2)]}, {'q': [(0, -2), (4, -2)]}, {'q': [(10, 0), (10, -30)]}, {'q': [(-20, -10), (-20, -40)]}, {'q': [(-5, 0), (-5, -5)]}, {'q': [(0, -5), (5, -5)]}, {'q': [(0, -20), (25, -20)]}, {'q': [(5, -5), (10, 0)]}, # base {'q': [(25, 0), (25, 20)]}, {'q': [(5, 0), (5, 5)]}, {'q': [(0, 5), (-5, 5)]}, {'q': [(0, 30), (-20, 40)]}, {'q': [(0, 30), (10, 30)]}, {'q': [(4, 0), (4, 2)]}, {'q': [(0, 2), (-4, 2)]}, {'z': ''} ] svg.dibujar(trayectoria(ldx, style=\"stroke:peru;stroke-width:0.75px;fill:orange;\")) # Trazado de un anillo. Lo 'hueco' se obtiene con fill-rule:evenodd; ldx = [ {'M': (240, 65)}, {'a': [(35, 35), 0, 0, 1, (70, 0)]}, {'a': [(35, 35), 0, 0, 1, (-70, 0)]}, {'M': (250, 65)}, {'a': [(25, 25), 0, 0, 1, (50, 0)]}, {'a': [(25, 25), 0, 0, 1, (-50, 0)]}, ] svg.dibujar(trayectoria(ldx, style=\"stroke:blue;stroke-width:1.5px;fill:cyan;fill-rule:evenodd;\")) svg.gravar(\"trayectoria.svg\") import json from html5svg2 import SVG2, trayectoria svg = SVG2('ajustable', W=1200, H=600, letra=\"Consolas\", color_fondo=\"goldenrod\") with open('jirish-nazca.json') as js: ldx = json.load(js) svg.dibujar(trayectoria(ldx, style=\"fill:none;stroke:white;stroke-width:2px;\")) svg.gravar(\"jirish-nazca.svg\") Texto texto(px, tx, **jx) # px = (x,y): punto de ubicaci\u00f3n del texto # tx: texto a mostrar # **js: argumentos clave:valor # ang: \u00e1ngulo de rotaci\u00f3n sobre el punto po y la horizontal (en grados) Ejemplo: from html5svg2 import SVG2, texto, trayectoria svg = SVG2('ajustable', W=330, H=150, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") ldx = [ {'M': (20, 120)}, {'h': 290}, {'M': (20, 140)}, {'h': 290}, {'M': (80, 5)}, {'v': 80}, {'M': (190, 20)}, {'h': 130}, {'M': (190, 40)}, {'h': 130}, {'M': (190, 60)}, {'h': 130}, {'M': (190, 80)}, {'h': 130}, ] stl_ = \"stroke:none;fill:royalblue;font-family:Arial;\" stl_1 = f\"{stl_}font-size:20px;\" stl_2 = f\"{stl_}font-size:10px;\" txt = \"20px: abc ABC jql \u00d1/Q \u00d3 0 .. 9\" l_db = [ trayectoria(ldx, style=\"stroke:red;stroke-width:0.25px;\"), texto((165, 120), txt, style=f\"{stl_1} text-anchor:middle;\"), texto((80, 100), \"Alineamiento horizontal:\", style=f\"{stl_2} text-anchor:middle;font-weight:bold\"), texto((80, 70), \"predefinido\", style=f\"{stl_2}\"), texto((80, 50), \"text-anchor:middle\", style=f\"{stl_2} text-anchor:middle;\"), texto((80, 30), \"text-anchor:end\", style=f\"{stl_2} text-anchor:end;\"), texto((80, 10), \"text-anchor:start\", style=f\"{stl_2} text-anchor:start;\"), texto((250, 100), \"Alineamiento vertical:\", style=f\"{stl_2} text-anchor:middle;font-weight:bold\"), texto((190, 80), \"dominant-baseline:auto\", style=f\"{stl_2} dominant-baseline:auto;\"), texto((190, 60), \"dominant-baseline:middle\", style=f\"{stl_2} dominant-baseline:middle;\"), texto((190, 40), \"dominant-baseline:central\", style=f\"{stl_2} dominant-baseline:central;\"), texto((190, 20), \"dominant-baseline:hanging\", style=f\"{stl_2} dominant-baseline:hanging;\"), texto((165, 75), \"texto rotado\", ang=45, style=f\"{stl_2} text-anchor:middle;\"), ] for db in l_db: svg.dibujar(db) svg.gravar(\"texto.svg\")","title":"3. SVG"},{"location":"3_svg/#svg","text":"","title":"SVG"},{"location":"3_svg/#sistema-de-coordenadas","text":"En esta aplicaci\u00f3n se la entrada de datos para dibujar figuras geom\u00e9tricas se emplea el sistema de coordenadas cartesianas. Para la definici\u00f3n de marcadores \u00fasese el sistema de coordenadas SVG.","title":"Sistema de coordenadas"},{"location":"3_svg/#figuras-geometricas","text":"","title":"Figuras geom\u00e9tricas"},{"location":"3_svg/#linea","text":"linea(p1, p2, **js) # p1 = (x1, y1) # p2 = (x2, y2) # **js: argumentos clave:valor Ejemplo: from html5svg2 import SVG2, linea svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(240,250,240)\") svg.cuadricula(10, style=\"stroke:green;stroke-width:0.1px;\") l_db = [ linea((10, 90), (150, 120), style=\"stroke:red;stroke-width:0.5px;\"), linea((10, 70), (150, 100), style=\"stroke:red;stroke-width:5px;\"), linea((10, 50), (150, 80), style=\"stroke:red;stroke-width:10px;\"), linea((10, 30), (150, 60), style=\"stroke:blue;\"), linea((10, 10), (150, 40), style=\"stroke:black;\"), linea((180, 100), (320, 100), style=\"stroke:black;stroke-dasharray:10 2\"), linea((180, 80), (320, 80), style=\"stroke:black;stroke-dasharray:10 5\"), linea((180, 60), (320, 60), style=\"stroke:black;stroke-dasharray:5\"), linea((180, 40), (320, 40), style=\"stroke:black;stroke-dasharray:10\"), linea((180, 20), (320, 20), style=\"stroke:black;\"), ] for db in l_db: svg.dibujar(db) svg.gravar(\"linea.svg\")","title":"L\u00ednea"},{"location":"3_svg/#polilinea","text":"polilinea(pts, **jx) # pts: lista de puntos [(x,y), ..] # **js: argumentos clave:valor Ejemplo: from html5svg2 import SVG2, polilinea svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") pts_1 = [(130, 30), (80, 30), (80, 10), (10, 65), (80, 120), (80, 100), (130, 100)] pts_2 = [(200, 30), (250, 30), (250, 10), (320, 65), (250, 120), (250, 100), (200, 100)] svg.dibujar(polilinea(pts_1, style=\"fill:none;stroke:blue;\")) svg.dibujar(polilinea(pts_2, style=\"fill:gold;stroke:blue;\")) svg.gravar(\"polilinea.svg\")","title":"Polilinea"},{"location":"3_svg/#poligono","text":"poligono(pts, **jx) # pts: lista de puntos [(x,y), ..] # **js: argumentos clave:valor Ejemplo: from html5svg2 import SVG2, poligono svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") pts_1 = [(130, 30), (80, 30), (80, 10), (10, 65), (80, 120), (80, 100), (130, 100)] pts_2 = [(200, 30), (250, 30), (250, 10), (320, 65), (250, 120), (250, 100), (200, 100)] svg.dibujar(poligono(pts_1, style=\"fill:none;stroke:blue;\")) svg.dibujar(poligono(pts_2, style=\"fill:gold;stroke:blue;\")) svg.gravar(\"poligono.svg\")","title":"Pol\u00edgono"},{"location":"3_svg/#rectangulo","text":"rectangulo(px, w, h, **jx) # px = (x,y) v\u00e9rtice inferior izquierdo del rect\u00e1ngulo # **js: argumentos clave:valor # rx: radio de curvatura en v\u00e9rtices # ry: radio de curvatura en v\u00e9rtices # ang: \u00e1ngulo de rotaci\u00f3n sobre el v\u00e9rtice px y la horizontal (en grados) Ejemplo: from html5svg2 import SVG2, rectangulo svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") stl = \"fill:PaleGreen;opacity:0.5;stroke:green;stroke-width:0.5px;\" stl2 = \"fill:yellow;opacity:0.5;stroke:magenta;stroke-width:1.5px;\" l_db = [ rectangulo((20, 20), 50, 30, style=stl), rectangulo((20, 80), 50, 30, rx=5, style=stl), rectangulo((100, 80), 50, 30, rx=10, ry=5, style=stl), rectangulo((100, 20), 50, 30, rx=5, ry=10, style=stl), rectangulo((220, 20), 80, 50, style=stl2), rectangulo((220, 20), 80, 50, ang=30, style=stl2), rectangulo((220, 20), 80, 50, ang=60, style=stl2), ] for db in l_db: svg.dibujar(db) svg.gravar(\"rectangulo.svg\")","title":"Rect\u00e1ngulo"},{"location":"3_svg/#circulo","text":"circulo(po, r, **jx) # po = (x,y): punto central del c\u00edrculo # r: radio del c\u00edrculo Ejemplo: import math from html5svg2 import SVG2, circulo svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") stl1 = \"stroke:blue;stroke-width:0.5;fill:gold;opacity:0.6;\" stl2 = \"stroke:blue;stroke-width:0.75;fill:cyan;opacity:0.3;\" xo = 165 yo = 65 rd = 50 n = 24 ang = 2 * math.pi / n sn = math.sin(ang / 2) r = rd * sn svg.dibujar(circulo((xo, yo), rd - r, style=stl1)) for i in range(n): x = xo + rd * math.cos(ang * i) y = yo + rd * math.sin(ang * i) svg.dibujar(circulo((x, y), r, style=stl2)) svg.gravar(\"circulo.svg\")","title":"C\u00edrculo"},{"location":"3_svg/#elipse","text":"elipse(po, rx, ry, ang, **jx) # po = (x,y): punto central de la elipse # rx: radio en el eje X # ry: radio en el eje Y # ang: \u00e1ngulo de rotaci\u00f3n sobre el punto po y la horizontal (en grados) # **js: argumentos clave:valor Ejemplo: import math from html5svg2 import SVG2, circulo, elipse svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") stl1 = \"stroke:blue;stroke-width:0.5;fill:gold;opacity:0.6;\" stl2 = \"stroke:red;stroke-width:1.5;fill:OrangeRed;opacity:0.3;\" xo = 165 yo = 65 rd = 30 n = 3 ang = 2 * math.pi / n svg.dibujar(elipse((xo, yo), 25, 25, 0, style=stl1)) for i in range(n): x = xo + rd * math.cos(ang * i) y = yo + rd * math.sin(ang * i) angr = i * 360 / n svg.dibujar(elipse((x, y), 30, 10, angr, style=stl2)) svg.gravar(\"elipse.svg\")","title":"Elipse"},{"location":"3_svg/#trayectoria","text":"trayectoria(ldx, **jx) Ejemplos: from html5svg2 import SVG2, trayectoria svg = SVG2('ajustable', W=330, H=130, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") # Trazado de una onda ldx = [{'M': (10, 65)}, {'q': [(20, 50), (40, 0)]}, {'q': [(20, -50), (40, 0)]}] svg.dibujar(trayectoria(ldx, style=\"stroke:blue;stroke-width:1.5px;fill:none;\")) # Trazado de una ar\u00edbalo inca ldx = [ {'M': (140, 120)}, {'q': [(-4, 0), (-4, -2)]}, {'q': [(0, -2), (4, -2)]}, {'q': [(10, 0), (10, -30)]}, {'q': [(-20, -10), (-20, -40)]}, {'q': [(-5, 0), (-5, -5)]}, {'q': [(0, -5), (5, -5)]}, {'q': [(0, -20), (25, -20)]}, {'q': [(5, -5), (10, 0)]}, # base {'q': [(25, 0), (25, 20)]}, {'q': [(5, 0), (5, 5)]}, {'q': [(0, 5), (-5, 5)]}, {'q': [(0, 30), (-20, 40)]}, {'q': [(0, 30), (10, 30)]}, {'q': [(4, 0), (4, 2)]}, {'q': [(0, 2), (-4, 2)]}, {'z': ''} ] svg.dibujar(trayectoria(ldx, style=\"stroke:peru;stroke-width:0.75px;fill:orange;\")) # Trazado de un anillo. Lo 'hueco' se obtiene con fill-rule:evenodd; ldx = [ {'M': (240, 65)}, {'a': [(35, 35), 0, 0, 1, (70, 0)]}, {'a': [(35, 35), 0, 0, 1, (-70, 0)]}, {'M': (250, 65)}, {'a': [(25, 25), 0, 0, 1, (50, 0)]}, {'a': [(25, 25), 0, 0, 1, (-50, 0)]}, ] svg.dibujar(trayectoria(ldx, style=\"stroke:blue;stroke-width:1.5px;fill:cyan;fill-rule:evenodd;\")) svg.gravar(\"trayectoria.svg\") import json from html5svg2 import SVG2, trayectoria svg = SVG2('ajustable', W=1200, H=600, letra=\"Consolas\", color_fondo=\"goldenrod\") with open('jirish-nazca.json') as js: ldx = json.load(js) svg.dibujar(trayectoria(ldx, style=\"fill:none;stroke:white;stroke-width:2px;\")) svg.gravar(\"jirish-nazca.svg\")","title":"Trayectoria"},{"location":"3_svg/#texto","text":"texto(px, tx, **jx) # px = (x,y): punto de ubicaci\u00f3n del texto # tx: texto a mostrar # **js: argumentos clave:valor # ang: \u00e1ngulo de rotaci\u00f3n sobre el punto po y la horizontal (en grados) Ejemplo: from html5svg2 import SVG2, texto, trayectoria svg = SVG2('ajustable', W=330, H=150, letra=\"Consolas\", color_fondo=\"rgb(250,250,230)\") svg.cuadricula(10, style=\"stroke:SlateBlue;stroke-width:0.1px;\") ldx = [ {'M': (20, 120)}, {'h': 290}, {'M': (20, 140)}, {'h': 290}, {'M': (80, 5)}, {'v': 80}, {'M': (190, 20)}, {'h': 130}, {'M': (190, 40)}, {'h': 130}, {'M': (190, 60)}, {'h': 130}, {'M': (190, 80)}, {'h': 130}, ] stl_ = \"stroke:none;fill:royalblue;font-family:Arial;\" stl_1 = f\"{stl_}font-size:20px;\" stl_2 = f\"{stl_}font-size:10px;\" txt = \"20px: abc ABC jql \u00d1/Q \u00d3 0 .. 9\" l_db = [ trayectoria(ldx, style=\"stroke:red;stroke-width:0.25px;\"), texto((165, 120), txt, style=f\"{stl_1} text-anchor:middle;\"), texto((80, 100), \"Alineamiento horizontal:\", style=f\"{stl_2} text-anchor:middle;font-weight:bold\"), texto((80, 70), \"predefinido\", style=f\"{stl_2}\"), texto((80, 50), \"text-anchor:middle\", style=f\"{stl_2} text-anchor:middle;\"), texto((80, 30), \"text-anchor:end\", style=f\"{stl_2} text-anchor:end;\"), texto((80, 10), \"text-anchor:start\", style=f\"{stl_2} text-anchor:start;\"), texto((250, 100), \"Alineamiento vertical:\", style=f\"{stl_2} text-anchor:middle;font-weight:bold\"), texto((190, 80), \"dominant-baseline:auto\", style=f\"{stl_2} dominant-baseline:auto;\"), texto((190, 60), \"dominant-baseline:middle\", style=f\"{stl_2} dominant-baseline:middle;\"), texto((190, 40), \"dominant-baseline:central\", style=f\"{stl_2} dominant-baseline:central;\"), texto((190, 20), \"dominant-baseline:hanging\", style=f\"{stl_2} dominant-baseline:hanging;\"), texto((165, 75), \"texto rotado\", ang=45, style=f\"{stl_2} text-anchor:middle;\"), ] for db in l_db: svg.dibujar(db) svg.gravar(\"texto.svg\")","title":"Texto"}]}